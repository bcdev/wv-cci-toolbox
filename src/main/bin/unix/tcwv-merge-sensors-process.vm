#!/bin/bash
set -x
set -e
set -m

# Calvalus processing script for the merge of two L3 products from two different sensors. 
# A sensor can also represent a previous merge of sensors.
# So overall we have as combinations: 
#     meris-modis_terra
#     meris-cmsaf_hoaps
#     modis_terra-cmsaf_hoaps
#     meris-modis_terra-cmsaf_hoaps

# e.g.
## from MERIS: /calvalus/projects/wvcci/tcwv/meris/l3-daily/005/2011/07/15-L3-1/l3_tcwv_meris_005deg_2011-07-15_2011-07-15.nc
## copy to local pwd MODIS: /calvalus/projects/wvcci/tcwv/modis_terra/l3-daily/005/2011/07/15-L3-1/l3_tcwv_modis_terra_005deg_2011-07-15_2011-07-15.nc

## from MERIS: /calvalus/projects/wvcci/tcwv/meris/l3-daily/005/2011/07/15-L3-1/l3_tcwv_meris_005deg_2011-07-15_2011-07-15.nc
## copy to local pwd CMSAF-HOAPS: /calvalus/projects/wvcci/tcwv/l3-daily/005/2011/07/15-L3-1/hoaps-g.r03.d01.wvpa.2011-07-15.nc

function copy_sensor2_from_hdfs {
  local sensor2Path=$1
  result=1
  echo "checking HDFS ${sensor2Path}"
  local hadoopLsResult=$(hadoop fs -ls ${sensor2Path})
  if [[ ${hadoopLsResult} ]]; then
    echo "copy to CWD: ${sensor2Path}"
    /opt/hadoop/bin/hadoop fs -copyToLocal $sensor2Path ${pwd}
    result=0
  fi
  return $result
}

sensor1HdfsInputDir="$parameters.get('sensor1InputDir')"
sensor1="$parameters.get('sensor1')"
sensor2="$parameters.get('sensor2')"
res="$parameters.get('res')"
year="$parameters.get('year')"
month="$parameters.get('month')"
day="$parameters.get('day')"
tcwvJarVersion="$parameters.get('tcwvJarVersion')"

#[[

# e.g. 
# MERIS: /calvalus/projects/wvcci/tcwv/meris/l3-daily/005/2011/07/15-L3-1/l3_tcwv_meris_005deg_2011-07-15_2011-07-15.nc
# MODIS: /calvalus/projects/wvcci/tcwv/modis_terra/l3-daily/005/2011/07/15-L3-1/l3_tcwv_modis_terra_005deg_2011-07-15_2011-07-15.nc
# CMSAF_HOAPS: /calvalus/projects/wvcci/tcwv/cmsaf_hoaps/l3-daily/005/2011/07/15-L3-1/hoaps-g.r03.d01.wvpa.2011-07-15.nc

# --> Merge: /calvalus/projects/wvcci/tcwv/meris-modis_terra/l3-daily/005/2011/07/15-L3-1/l3_tcwv_meris-modis_terra_005deg_2011-07-15_2011-07-15.nc
# --> Merge: /calvalus/projects/wvcci/tcwv/meris-cmsaf_hoaps/l3-daily/005/2011/07/15-L3-1/l3_tcwv_meris-cmsaf_hoaps_005deg_2011-07-15_2011-07-15.nc

sensor1_infile=$1
sensor1_infile_name=`basename ${sensor1_infile} .nc`           # l3_tcwv_meris_005deg_2011-07-15_2011-07-15

sensor2HdfsInputDir=${sensor1HdfsInputDir//$sensor1/$sensor2}    # /calvalus/projects/wvcci/tcwv/modis_terra/l3-daily/005/2011/07/15-L3-1
sensor2_infile=$(hadoop fs -ls -C ${sensor2HdfsInputDir}/*.nc)       # /calvalus/projects/wvcci/tcwv/modis_terra/l3-daily/005/2011/07/15-L3-1/l3_tcwv_modis_terra_005deg_2011-07-15_2011-07-15.nc
sensor2_infile_name=$(basename `hadoop fs -ls -C ${sensor2HdfsInputDir}/*.nc`)  # l3_tcwv_modis_terra_005deg_2011-07-15_2011-07-15.nc OR hoaps-g.r03.d01.wvpa.2011-07-15.nc

if ! copy_sensor2_from_hdfs ${sensor2_infile}; then
  echo "failed to get sensor2 input file"
  exit 1
fi

sensorsMerge="${sensor1}-${sensor2}"
outfile=${sensor1_infile_name//$sensor1/$sensorsMerge}

echo "`ls -la $(pwd)`"

jars=snap-all.jar:snap-tcwv-${tcwvJarVersion}.jar
class=org.esa.snap.core.gpf.main.GPT

if [[ $sensor2 =~ "hoaps" ]]
then
  echo "/usr/lib/jvm/default-java/bin/java -Xmx2048M -classpath ${jars} ${class} ESACCI.Tcwv.L3.Merge.Nir.Hoaps -SnirProduct=${sensor1_infile} -ShoapsProduct=$(pwd)/${sensor2_infile_name} -f NetCDF4-WVCCI -t ./${outfile}.nc"
  /usr/lib/jvm/default-java/bin/java -Xmx2048M -classpath ${jars} ${class} ESACCI.Tcwv.L3.Merge.Nir.Hoaps -SnirProduct=${sensor1_infile} -ShoapsProduct=$(pwd)/${sensor2_infile_name} -f NetCDF4-WVCCI -t ./${outfile}.nc
else
  echo "/usr/lib/jvm/default-java/bin/java -Xmx2048M -classpath ${jars} ${class} ESACCI.Tcwv.L3.Merge.Nir.Nir -Ssensor1Product=${sensor1_infile} -Ssensor2Product=$(pwd)/${sensor2_infile_name} -f NetCDF4-WVCCI -t ./${outfile}.nc"
  /usr/lib/jvm/default-java/bin/java -Xmx2048M -classpath ${jars} ${class} ESACCI.Tcwv.L3.Merge.Nir.Nir -Ssensor1Product=${sensor1_infile} -Ssensor2Product=$(pwd)/${sensor2_infile_name} -f NetCDF4-WVCCI -t ./${outfile}.nc
fi

status=$?
echo "Status: $status"

if [ $status = 0 ]
then
    echo "Merge file of $sensor1 and $sensor2 created."
    echo "Status: $status"
    rm -f ./${sensor2_infile_name}.nc
fi

echo CALVALUS_OUTPUT_PRODUCT ${outfile}.nc

]]#